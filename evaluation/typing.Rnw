%!TEX root = ../ecoop2019/paper.tex

<<knitr-settings, echo=FALSE, include=FALSE>>=
# load libraries, the data, and prepare it
if (Sys.getenv("RSTUDIO") == "1") { 
  if (Sys.getenv("LOGNAME") == "smarr") {
    setwd("/Users/smarr/Collab/Richard-Roberts/AliveTyping/evaluation") } }

source("scripts/libraries.R", chdir=TRUE)
source("scripts/paper.R", chdir=TRUE)

# bench <- readRDS("acme.rds.bz2")
data_0 <- load_data_file("023-a3e099e1-full-run.data.bz2") %>%
  select(c("Value", "Unit", "Benchmark", "VM", "Iteration")) %>%
  filter(VM == "Moth (both)" | VM == "Moth (untyped)")
data_warmup <- filter(data_0, Iteration <= warmup_low_fast)
data_0 <- filter(data_0, Iteration >= warmup_low_fast & Iteration < warmup_high)


#data <- rbind(data_1, data_2)

data <- droplevels(data_0)
data_warmup <- droplevels(data_warmup)

# levels(droplevels(filter(data, VM == "Moth (both)"))$Benchmark)

moth <- data %>%
  filter(VM == "Moth (untyped)") %>%
  group_by(Benchmark) %>%
  summarise(RuntimeMean = mean(Value))

moth_warmup <- data_warmup %>%
  filter(VM == "Moth (untyped)") %>%
  group_by(Benchmark) %>%
  summarise(RuntimeMean = mean(Value))

norm <- data %>%
  left_join(moth, by = "Benchmark") %>%
  group_by(Benchmark) %>%
  transform(RuntimeRatio = Value / RuntimeMean)

norm_warmup <- data_warmup %>%
  left_join(moth_warmup, by = "Benchmark") %>%
  group_by(Benchmark) %>%
  transform(RuntimeRatio = Value / RuntimeMean)

norm_warmup <- data_warmup %>%
  filter(VM=="Moth (both)") %>%
  left_join(data_warmup %>% filter(VM=="Moth (untyped)"), by = c("Benchmark", "Iteration", "Unit")) %>%
  group_by(Benchmark) %>%
  transform(RuntimeRatio = Value.x / Value.y)


  
stats <- norm %>%
  group_by(VM, Benchmark) %>%
  summarise(
    Time.ms = mean(Value),
    sd      = sd(Value),
    RuntimeFactor = mean(RuntimeRatio),
    RR.sd         = sd(RuntimeRatio),
    RR.median     = median(RuntimeRatio))

vm_stats <- stats %>%
  group_by(VM) %>%
  summarise(
    geomean = geometric.mean(RuntimeFactor),
    median = median(RuntimeFactor),
    min = min(RuntimeFactor),
    max = max(RuntimeFactor))
@

\def\TypingOverhead{%
<<typing-overhead, fig.height=3.6, fig.width=3.3>>=
typing_overhead <- droplevels(filter(norm, VM=="Moth (both)"))
#to_vm_names <- vm_names[levels(typing_overhead$VM)]
#typing_overhead$VM <- revalue(typing_overhead$VM, to_vm_names)

p <- ggplot(typing_overhead, aes(reorder(Benchmark, desc(Benchmark)), RuntimeRatio))
p <- p +
  geom_hline(aes(yintercept=0.8), colour="#cccccc", linetype="dashed") +
  geom_hline(aes(yintercept=0.9), colour="#cccccc", linetype="dashed") +
  geom_hline(aes(yintercept=1), colour="#cccccc", linetype="dashed") +
  geom_hline(aes(yintercept=1.1), colour="#cccccc", linetype="dashed") +
  geom_hline(aes(yintercept=1.5), colour="#cccccc", linetype="dashed") +
  geom_boxplot(outlier.size = 0.2) +
  scale_y_log10(breaks = c(0.8, 0.9, 1, 1.1, 1.5, 2)) +
  coord_flip(ylim = c(0.80, 2))  # 
p <- p + theme_simple(font_size = 8) +
    theme(axis.text.x = element_text(angle= 90, vjust=0.5, hjust=1),
          legend.position="none",
          strip.placement = "outside",
          axis.title.x = element_text(size = 8),
          axis.title.y = element_blank(),
          plot.margin = unit(c(0,0,0.1,0.1), "cm"))
p <- p + ylab("Run-time factor, normalized to Moth (untyped)\n(lower is better)") +  xlab("")
p
@
}%

\def\TypingWarmup{%
<<typing-overhead-warmup, fig.height=5, fig.width=5.5>>=
p <- ggplot(droplevels(norm_warmup) %>% filter(Iteration < 100), aes(x=Iteration, y=RuntimeRatio)) +
  geom_hline(aes(yintercept=1), colour="#cccccc", linetype="dashed") +
  geom_smooth(method = "loess", colour = "#888888") +
  geom_line(colour = "black") +
  facet_wrap(~ Benchmark, ncol = 3) +
  coord_cartesian(ylim = c(0, 2.2))

p + theme_simple(font_size = 8) + theme(
  legend.position = "none",
  strip.background = element_blank(),
  panel.spacing.y = unit(0, "mm"),
  strip.switch.pad.wrap = unit(0, "mm"),
  axis.title.x = element_text(size = 8),
  plot.margin = unit(c(0,0.1,0.1,0.1), "cm"),
  panel.border = element_blank()) +
  ylab("Run-time factor, normalized to untyped (lower is better)") +  xlab("Iterations in same VM")
@
}%

\newcommand{\OverheadTypingGMeanX}{\Sexpr{X1(filter(vm_stats, VM=="Moth (both)")$geomean)}x\xspace}
\newcommand{\OverheadTypingMinX}{\Sexpr{X1(filter(vm_stats, VM=="Moth (both)")$min)}x\xspace}
\newcommand{\OverheadTypingMaxX}{\Sexpr{X1(filter(vm_stats, VM=="Moth (both)")$max)}x\xspace}

\newcommand{\OverheadTypingGMeanP}{\Sexpr{per(filter(vm_stats, VM=="Moth (both)")$geomean)}\%\xspace}
\newcommand{\OverheadTypingMinP}{\Sexpr{per(filter(vm_stats, VM=="Moth (both)")$min)}\%\xspace}
\newcommand{\OverheadTypingMaxP}{\Sexpr{per(filter(vm_stats, VM=="Moth (both)")$max)}\%\xspace}

\newcommand{\OverheadListP}{\Sexpr{per(filter(stats, VM=="Moth (both)" & Benchmark == "List")$RuntimeFactor)}\%\xspace}

\newcommand{\OverheadPermuteP}{\Sexpr{per(filter(stats, VM=="Moth (both)" & Benchmark == "Permute")$RuntimeFactor)}\%\xspace}
\newcommand{\OverheadGraphSearchP}{\Sexpr{per(filter(stats, VM=="Moth (both)" & Benchmark == "GraphSearch")$RuntimeFactor)}\%\xspace}
\newcommand{\OverheadStorageP}{\Sexpr{per(filter(stats, VM=="Moth (both)" & Benchmark == "Storage")$RuntimeFactor)}\%\xspace}

\newcommand{\OverheadRichardsP}{\Sexpr{per(filter(stats, VM=="Moth (both)" & Benchmark == "Richards")$RuntimeFactor)}\%\xspace}
\newcommand{\OverheadCDP}{\Sexpr{per(filter(stats, VM=="Moth (both)" & Benchmark == "CD")$RuntimeFactor)}\%\xspace}
\newcommand{\OverheadSnakeP}{\Sexpr{per(filter(stats, VM=="Moth (both)" & Benchmark == "Snake")$RuntimeFactor)}\%\xspace}
\newcommand{\OverheadTowersP}{\Sexpr{per(filter(stats, VM=="Moth (both)" & Benchmark == "Towers")$RuntimeFactor)}\%\xspace}
